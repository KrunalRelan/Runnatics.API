using AutoMapper;
using Runnatics.Models.Data.Entities;
using Runnatics.Models.Data.Common;
using Runnatics.Models.Client.Responses;
using Runnatics.Models.Client.Requests;
using Runnatics.Models.Client.Responses.Events;
using Runnatics.Models.Client.Requests.Events;

namespace Runnatics.Services
{
    /// <summary>
    /// AutoMapper profile for mapping between data entities and client models
    /// </summary>
    public class AutoMapperMappingProfile : Profile
    {
        public AutoMapperMappingProfile()
        {
            // Organization mappings
            CreateMap<Organization, OrganizationResponse>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
                .ForMember(dest => dest.SubscriptionPlan, opt => opt.MapFrom(src => src.SubscriptionPlan))
                .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => src.AuditProperties.IsActive))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.AuditProperties.CreatedDate));

            // User mappings
            CreateMap<User, UserResponse>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.OrganizationId, opt => opt.MapFrom(src => src.OrganizationId))
                .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.FirstName))
                .ForMember(dest => dest.LastName, opt => opt.MapFrom(src => src.LastName))
                .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
                .ForMember(dest => dest.Role, opt => opt.MapFrom(src => src.Role))
                .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => src.AuditProperties.IsActive))
                .ForMember(dest => dest.LastLoginAt, opt => opt.MapFrom(src => src.LastLoginAt))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.AuditProperties.CreatedDate))
                .ForMember(dest => dest.UpdatedAt, opt => opt.MapFrom(src => src.AuditProperties.UpdatedDate))
                .ForMember(dest => dest.ProfileImageUrl, opt => opt.Ignore()) // User entity doesn't have this field
                .ForMember(dest => dest.OrganizationName, opt => opt.MapFrom(src => src.Organization != null ? src.Organization.Name : string.Empty));

            // UserInvitation mappings
            CreateMap<UserInvitation, InvitationResponse>()
                .ForMember(dest => dest.InvitationId, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
                .ForMember(dest => dest.Role, opt => opt.MapFrom(src => src.Role.ToString()))
                .ForMember(dest => dest.Status, opt => opt.MapFrom(src =>
                    src.IsAccepted ? "Accepted" :
                    src.IsExpired ? "Expired" :
                    DateTime.UtcNow > src.ExpiryDate ? "Expired" : "Pending"))
                .ForMember(dest => dest.ExpiresAt, opt => opt.MapFrom(src => src.ExpiryDate))
                .ForMember(dest => dest.InvitationLink, opt => opt.Ignore()); // This should be generated by the service

            // Request mappings
            CreateMap<InviteUserRequest, UserInvitation>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Generated
                .ForMember(dest => dest.OrganizationId, opt => opt.Ignore()) // Set by service
                .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
                .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.FirstName))
                .ForMember(dest => dest.LastName, opt => opt.MapFrom(src => src.LastName))
                .ForMember(dest => dest.Role, opt => opt.MapFrom(src => Enum.Parse<UserRole>(src.Role)))
                .ForMember(dest => dest.Token, opt => opt.Ignore()) // Generated by service
                .ForMember(dest => dest.InvitedBy, opt => opt.Ignore()) // Set by service
                .ForMember(dest => dest.ExpiryDate, opt => opt.Ignore()) // Set by service
                .ForMember(dest => dest.IsAccepted, opt => opt.MapFrom(src => false))
                .ForMember(dest => dest.IsExpired, opt => opt.MapFrom(src => false))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => DateTime.UtcNow))
                .ForMember(dest => dest.AcceptedAt, opt => opt.Ignore())
                .ForMember(dest => dest.AcceptedBy, opt => opt.Ignore())
                .ForMember(dest => dest.Organization, opt => opt.Ignore())
                .ForMember(dest => dest.InvitedByUser, opt => opt.Ignore())
                .ForMember(dest => dest.AcceptedByUser, opt => opt.Ignore());


            //Event mappings
            CreateMap<EventRequest, Event>();
                
        }
    }
}
